<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 *
 */
 

namespace Com\Ub\Easymoney\Models\Commons\Reponses;

/**
 * (no documentation provided)
 */
class MetaData
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $message;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $status;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $devMessage;

    /**
     * (no documentation provided)
     *
     * @var mixed
     */
    private $metaData;

    /**
     * Constructs a MetaData from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * (no documentation provided)
     *
     * @param string $message
     */
    public function setMessage($message)
    {
        $this->message = $message;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * (no documentation provided)
     *
     * @param string $status
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDevMessage()
    {
        return $this->devMessage;
    }

    /**
     * (no documentation provided)
     *
     * @param string $devMessage
     */
    public function setDevMessage($devMessage)
    {
        $this->devMessage = $devMessage;
    }
    /**
     * (no documentation provided)
     *
     * @return mixed
     */
    public function getMetaData()
    {
        return $this->metaData;
    }

    /**
     * (no documentation provided)
     *
     * @param mixed $metaData
     */
    public function setMetaData($metaData)
    {
        $this->metaData = $metaData;
    }

    /**
     * Initializes this MetaData from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of MetaData from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'message') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->message = $child;
            $happened = true;
        }
        else if (($xml->localName == 'status') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->status = $child;
            $happened = true;
        }
        else if (($xml->localName == 'devMessage') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->devMessage = $child;
            $happened = true;
        }
        else if (($xml->localName == 'metaData') && (empty($xml->namespaceURI))) {
            $child = new \SimpleXMLElement($xml);
            $this->metaData = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of MetaData from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes the contents of this MetaData to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->message) {
            $writer->startElementNs(null, 'message', null);
            $writer->text($this->message);
            $writer->endElement();
        }
        if ($this->status) {
            $writer->startElementNs(null, 'status', null);
            $writer->text($this->status);
            $writer->endElement();
        }
        if ($this->devMessage) {
            $writer->startElementNs(null, 'devMessage', null);
            $writer->text($this->devMessage);
            $writer->endElement();
        }
        if ($this->metaData) {
            $writer->startElementNs(null, 'metaData', null);
            $this->metaData->writeXmlContents($writer);
            $writer->endElement();
        }
    }
}

namespace Com\Ub\Easymoney\Models\Commons\Reponses;

/**
 * (no documentation provided)
 */
class Response
{

    /**
     * (no documentation provided)
     *
     * @var mixed
     */
    private $data;

    /**
     * (no documentation provided)
     *
     * @var \Com\Ub\Easymoney\Models\Commons\Reponses\MetaData
     */
    private $meta;

    /**
     * Constructs a Response from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    /**
     * (no documentation provided)
     *
     * @return mixed
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * (no documentation provided)
     *
     * @param mixed $data
     */
    public function setData($data)
    {
        $this->data = $data;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Ub\Easymoney\Models\Commons\Reponses\MetaData
     */
    public function getMeta()
    {
        return $this->meta;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Ub\Easymoney\Models\Commons\Reponses\MetaData $meta
     */
    public function setMeta($meta)
    {
        $this->meta = $meta;
    }

    /**
     * Initializes this Response from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of Response from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'data') && (empty($xml->namespaceURI))) {
            $child = new \SimpleXMLElement($xml);
            $this->data = $child;
            $happened = true;
        }
        else if (($xml->localName == 'meta') && (empty($xml->namespaceURI))) {
            $child = new \Com\Ub\Easymoney\Models\Commons\Reponses\MetaData($xml);
            $this->meta = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Response from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes the contents of this Response to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->data) {
            $writer->startElementNs(null, 'data', null);
            $this->data->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->meta) {
            $writer->startElementNs(null, 'meta', null);
            $this->meta->writeXmlContents($writer);
            $writer->endElement();
        }
    }
}

namespace Com\Ub\Easymoney\Models;

/**
 * (no documentation provided)
 */
class ModelLogin
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $user;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $pass;

    /**
     * Constructs a ModelLogin from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * (no documentation provided)
     *
     * @param string $user
     */
    public function setUser($user)
    {
        $this->user = $user;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPass()
    {
        return $this->pass;
    }

    /**
     * (no documentation provided)
     *
     * @param string $pass
     */
    public function setPass($pass)
    {
        $this->pass = $pass;
    }

    /**
     * Initializes this ModelLogin from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of ModelLogin from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'user') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->user = $child;
            $happened = true;
        }
        else if (($xml->localName == 'pass') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->pass = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of ModelLogin from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes the contents of this ModelLogin to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->user) {
            $writer->startElementNs(null, 'user', null);
            $writer->text($this->user);
            $writer->endElement();
        }
        if ($this->pass) {
            $writer->startElementNs(null, 'pass', null);
            $writer->text($this->pass);
            $writer->endElement();
        }
    }
}

namespace Com\Ub\Easymoney\Models\Commons\Commons\Enums;

/**
 * (no documentation provided)
 */
class Status
{

    /**
     * (no documentation provided)
     */
    const OK = "OK";

    /**
     * (no documentation provided)
     */
    const ERROR = "ERROR";

    /**
     * (no documentation provided)
     */
    const WARNING = "WARNING";

    /**
     * (no documentation provided)
     */
    const ACCES_DENIED = "ACCES_DENIED";

    /**
     * (no documentation provided)
     */
    const INVALID_PARAM = "INVALID_PARAM";

    /**
     * (no documentation provided)
     */
    const PARCIAL_ACCESS = "PARCIAL_ACCESS";
}
